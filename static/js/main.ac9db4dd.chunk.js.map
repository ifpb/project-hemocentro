{"version":3,"sources":["img/medical.png","utils/customTheme.js","utils/Constants.js","components/Navbar/index.js","components/Sidebar/index.js","App.js","services/index.js","services/Professional.js","components/Professionals/ProfessionalForm.js","components/Professionals/ProfessionalManager.js","components/Professionals/ProfessionalEditForm.js","components/Patients/PatientForm.js","components/Patients/PatientManager.js","components/Patients/PatientEditForm.js","components/Patients/PatientTImeline.js","routes.js","index.js"],"names":["module","exports","theme","createMuiTheme","palette","secondary","light","main","dark","primary","Navbar","props","AppBar","position","Toolbar","mobile","IconButton","edge","color","aria-label","onClick","openSideBar","Typography","variant","to","style","textDecoration","useStyles","makeStyles","drawer","width","Constants","drawerPaper_desktop","marginTop","drawerPaper_mobile","nested","marginLeft","Sidebar","history","useHistory","classes","useState","openOptionsEmployee","setOpenOptionsEmployee","openOptionsPatient","setOpenOptionsPatient","Drawer","className","open","paper","Button","closeSideBar","List","ListItem","button","ListItemIcon","ListItemText","Collapse","in","timeout","unmountOnExit","component","disablePadding","push","main_mobile","display","justifyContent","main_desktop","App","sideBar","setSideBar","mobileMatches","useMediaQuery","ThemeProvider","CssBaseline","Container","src","banner","maxWidth","height","api","axios","create","baseURL","data","post","response","get","id","put","delete","main_card","flexDirection","padding","input","btn","alert","marginBottom","RegisterSchema","Yup","shape","name","required","email","operation","ProfessionalForm","submit","setSubmit","submitError","setSubmitError","onSubmit","values","a","Professional","setTimeout","Paper","elevation","Alert","severity","initialValues","validationSchema","handleChange","handleBlur","handleSubmit","errors","touched","TextField","error","label","onChange","onBlur","value","helperText","FormControl","InputLabel","NativeSelect","FormHelperText","main_content","alignItems","marginRight","table","ProfessionalManager","professionalsData","setProfessionalsData","setError","useEffect","fetchApi","handleDelete","updatedProfessionals","filter","_id","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","map","row","key","pathname","state","location","useLocation","professional","tel","gender","age","positive","integer","PatientForm","localStorage","getItem","setItem","patients","JSON","parse","stringify","err","PatientManager","patientData","setPatientData","updatedPatients","patient","item","PatientTimeline","Timeline","align","TimelineItem","TimelineOppositeContent","TimelineSeparator","TimelineDot","TimelineConnector","TimelineContent","routes","basename","process","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uHAAAA,EAAOC,QAAU,IAA0B,qC,gOCiB5BC,EAfDC,YAAe,CACzBC,QAAS,CACLC,UAAW,CACPC,MAAO,UACPC,KAAM,UACNC,KAAM,WAEVC,QAAS,CACLH,MAAO,UACPC,KAAM,UACNC,KAAM,cCZH,EACG,Q,sDCUH,SAASE,EAAOC,GAC3B,OACI,kBAACC,EAAA,EAAD,CAAQC,SAAS,SACb,kBAACC,EAAA,EAAD,KACKH,EAAMI,OACH,kBAACC,EAAA,EAAD,CACIC,KAAK,QACLC,MAAM,UACNC,aAAW,OACXC,QAAST,EAAMU,aAEf,kBAAC,IAAD,OAEN,KACF,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAChB,kBAAC,IAAD,CAAMC,GAAG,IAAIC,MAAO,CAACC,eAAgB,OAAQR,MAAO,YAApD,wB,+KCHdS,EAAYC,YAAW,CACzBC,OAAQ,CACJC,MAAOC,GAEXC,oBAAqB,CACjBF,MAAOC,EACPE,UAAW,QAEfC,mBAAoB,CAChBJ,MAAOC,GAEXI,OAAQ,CACJC,WAAY,UAIL,SAASC,EAAQ1B,GAC5B,IAAM2B,EAAUC,cACVC,EAAUb,IAFmB,EAGmBc,oBAAS,GAH5B,mBAG5BC,EAH4B,KAGPC,EAHO,OAIiBF,oBAAS,GAJ1B,mBAI5BG,EAJ4B,KAIRC,EAJQ,KAcnC,OACI,kBAACC,EAAA,EAAD,CACIC,UAAWP,EAAQX,OACnBmB,MAAMrC,EAAMI,QAASJ,EAAMqC,KAC3BzB,QAASZ,EAAMI,OAAS,YAAc,YACtCyB,QAAS7B,EAAMI,OAAU,CACrBkC,MAAOT,EAAQN,oBACd,CAAEe,MAAOT,EAAQR,sBAEtB,6BACKrB,EAAMI,OACH,kBAACmC,EAAA,EAAD,CAAQ9B,QAAST,EAAMwC,cAAvB,UACA,KACJ,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAAClC,QAtBD,WAC5BuB,GAAuB,SAAAD,GAAmB,OAAKA,OAsB/B,kBAACa,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAc/C,QAAQ,6BACrBiC,EAAsB,kBAAC,IAAD,MAAiB,kBAAC,IAAD,OAE5C,kBAACe,EAAA,EAAD,CAAUC,GAAIhB,EAAqBiB,QAAQ,OAAOC,eAAa,GAC3D,kBAACR,EAAA,EAAD,CAAMS,UAAU,MAAMC,gBAAc,GAChC,kBAACT,EAAA,EAAD,CAAUC,QAAM,EACZP,UAAWP,EAAQL,OACnBf,QAAS,WACLkB,EAAQyB,KAAK,qBACbpD,EAAMwC,iBAGV,kBAACI,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAc/C,QAAQ,eAE1B,kBAAC4C,EAAA,EAAD,CAAUC,QAAM,EACZP,UAAWP,EAAQL,OACnBf,QAAS,WACLkB,EAAQyB,KAAK,iBACbpD,EAAMwC,iBAIV,kBAACI,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAc/C,QAAQ,iBAIlC,kBAAC4C,EAAA,EAAD,CAAUC,QAAM,EAAClC,QAtDF,WAC3ByB,GAAsB,SAAAD,GAAkB,OAAKA,OAsD7B,kBAACW,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAc/C,QAAQ,cACrBmC,EAAqB,kBAAC,IAAD,MAAiB,kBAAC,IAAD,OAE3C,kBAACa,EAAA,EAAD,CAAUC,GAAId,EAAoBe,QAAQ,OAAOC,eAAa,GAC1D,kBAACR,EAAA,EAAD,CAAMS,UAAU,MAAMC,gBAAc,GAChC,kBAACT,EAAA,EAAD,CAAUC,QAAM,EACZP,UAAWP,EAAQL,OACnBf,QAAS,WACLkB,EAAQyB,KAAK,iBACbpD,EAAMwC,iBAGV,kBAACI,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAc/C,QAAQ,eAE1B,kBAAC4C,EAAA,EAAD,CAAUC,QAAM,EACZP,UAAWP,EAAQL,OACnBf,QAAS,WACLkB,EAAQyB,KAAK,aACbpD,EAAMwC,iBAIV,kBAACI,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAc/C,QAAQ,oB,sBCpHhDkB,EAAYC,YAAW,CAC3BoC,YAAY,CACVC,QAAS,OACTC,eAAgB,SAChBjC,UAAW,SAEbkC,aAAa,CACXrC,MAAM,eAAD,OAAiBC,EAAjB,KACLK,WAAYL,EACZkC,QAAS,OACTC,eAAgB,SAChBjC,UAAW,WAIA,SAASmC,EAAIzD,GAC1B,IAAM6B,EAAUb,IADiB,EAEHc,oBAAS,GAFN,mBAE1B4B,EAF0B,KAEjBC,EAFiB,KAG3BC,EAAgBC,YAAc,qBASpC,OACE,kBAACC,EAAA,EAAD,CAAevE,MAAOA,GACpB,kBAACwE,EAAA,EAAD,MACA,kBAAChE,EAAD,CAAQW,YAVQ,WAClBiD,GAAW,IASyBvD,OAAQwD,IAC1C,kBAAClC,EAAD,CAASW,KAAMqB,EAASlB,aAPP,WACnBmB,GAAW,IAM2CvD,OAAQwD,IAC5D,8BACE,kBAACI,EAAA,EAAD,CAAW5B,UAAWwB,EAAgB/B,EAAQwB,YAAcxB,EAAQ2B,cACjExD,EAAMkD,UAAYlD,EAAMkD,UAAa,yBAAKe,IAAKC,IAAQpD,MAAO,CAACqD,SAAU,MAAMC,OAAQ,a,6HC/CnFC,G,QAJHC,EAAMC,OAAO,CACvBC,QAAS,mDCDI,YACIC,GAAO,OAAD,0HACMJ,GAAIK,KAAK,iBAAkBD,GADjC,cACXE,EADW,yBAEVA,GAFU,8CADV,cAKK,OAAD,0HACYN,GAAIO,IAAI,kBADpB,cACLD,EADK,yBAEJA,GAFI,8CALJ,YAaAE,EAAIJ,GAAO,OAAD,0HACMJ,GAAIS,IAAJ,yBAA0BD,GAAMJ,GADtC,cACXE,EADW,yBAEVA,GAFU,8CAbV,YAiBEE,GAAK,OAAD,0HACUR,GAAIU,OAAJ,yBAA6BF,IADvC,cACPF,EADO,yBAENA,GAFM,8CCFf3D,GAAYC,YAAW,CACzB+D,UAAW,CACP7D,MAAO,MACPmC,QAAS,OACT2B,cAAe,SACfC,QAAS,QAEbC,MAAO,CACH7D,UAAW,QAEf8D,IAAK,CACD9D,UAAW,QAEf+D,MAAO,CACHC,aAAc,UAIhBC,GAAiBC,OAAaC,MAAM,CACtCC,KAAMF,OAAaG,SAAS,wBAC5BC,MAAOJ,OAAaI,MAAM,qBAAkBD,SAAS,wBACrDE,UAAWL,OAAaG,SAAS,0BAGtB,SAASG,KACpB,IAAMjE,EAAUb,KACVW,EAAUC,cAFuB,EAGXE,oBAAS,GAHE,mBAGhCiE,EAHgC,KAGxBC,EAHwB,OAIDlE,oBAAS,GAJR,mBAIhCmE,EAJgC,KAInBC,EAJmB,KAMjCC,EAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,+EAEHC,GAAsBF,GAFnB,OAGTF,GAAe,GACfF,GAAU,GACVO,YAAW,kBAAM5E,EAAQyB,KAAK,mBAAkB,KALvC,gDAQT8C,GAAe,GARN,yDAAH,sDAWd,OACI,oCACI,kBAACM,EAAA,EAAD,CAAOC,UAAW,EAAGrE,UAAWP,EAAQmD,WACnCe,EACG,kBAACW,GAAA,EAAD,CACIC,SAAS,UACTvE,UAAWP,EAAQwD,OAFvB,mCAIE,KACLY,EACG,kBAACS,GAAA,EAAD,CACIC,SAAS,QACTvE,UAAWP,EAAQwD,OAFvB,gFAKE,KACN,kBAAC1E,EAAA,EAAD,CAAYC,QAAQ,MAApB,+BACA,kBAAC,KAAD,CACIgG,cAAe,CACXlB,KAAM,GACNE,MAAO,GACPC,UAAW,IAEfgB,iBAAkBtB,GAClBY,SAAUA,IAET,gBAAGW,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,WAAYC,EAA7B,EAA6BA,aAAcZ,EAA3C,EAA2CA,OAAQa,EAAnD,EAAmDA,OAAQC,EAA3D,EAA2DA,QAA3D,OACG,oCACI,kBAACC,GAAA,EAAD,CACIC,SAAOH,EAAOvB,OAAQwB,EAAQxB,MAC9Bb,GAAG,OACHwC,MAAM,OACNjF,UAAWP,EAAQsD,MACnBmC,SAAUR,EACVS,OAAQR,EACRS,MAAOpB,EAAOV,KACd+B,WACIR,EAAOvB,MAAQwB,EAAQxB,KACnBuB,EAAOvB,KACP,OAGZ,kBAACyB,GAAA,EAAD,CACIC,SAAOH,EAAOrB,QAASsB,EAAQtB,OAC/Bf,GAAG,QACHwC,MAAM,SACNjF,UAAWP,EAAQsD,MACnBmC,SAAUR,EACVS,OAAQR,EACRS,MAAOpB,EAAOR,MACd6B,WACIR,EAAOrB,OAASsB,EAAQtB,MACpBqB,EAAOrB,MACP,OAGZ,kBAAC8B,GAAA,EAAD,CAAatF,UAAWP,EAAQsD,MAC5BiC,SAAOH,EAAOpB,YAAaqB,EAAQrB,YACnC,kBAAC8B,GAAA,EAAD,CAAY9C,GAAG,aAAf,iBACA,kBAAC+C,GAAA,EAAD,CACI/C,GAAG,YACH2C,MAAOpB,EAAOP,UACdyB,SAAUR,EACVS,OAAQR,GAER,4BAAQvG,aAAW,OAAOgH,MAAM,KAChC,4BAAQA,MAAO,iBAAf,iBACA,4BAAQA,MAAO,aAAf,gBACA,4BAAQA,MAAO,kBAAf,mBAEJ,kBAACK,GAAA,EAAD,KAEQZ,EAAOpB,WAAaqB,EAAQrB,UACxBoB,EAAOpB,UACP,OAIhB,kBAACtD,EAAA,EAAD,CACI3B,QAAQ,YACRL,MAAM,YACN6B,UAAWP,EAAQuD,IACnB3E,QAASuG,GAJb,mB,gECxHtBhG,GAAYC,YAAW,CACzB6G,aAAc,CACVxG,UAAW,QACXgC,QAAS,OACT2B,cAAe,SACf8C,WAAY,UAEhB3C,IAAK,CACD4C,YAAa,QAEjBC,MAAO,CACH9G,MAAO,UAIA,SAAS+G,KACpB,IAAMrG,EAAUb,KACVW,EAAUC,cAF0B,EAGQE,qBAHR,mBAGnCqG,EAHmC,KAGhBC,EAHgB,OAIhBtG,oBAAS,GAJO,mBAInCsF,EAJmC,KAI5BiB,EAJ4B,KAM1CC,qBAAU,WAAM,4CACZ,4BAAAjC,EAAA,+EAE+BC,KAF/B,OAEc3B,EAFd,OAGQyD,EAAqBzD,EAASF,MAHtC,gDAKQ4D,GAAS,GALjB,0DADY,uBAAC,WAAD,wBASZE,KACD,IAEH,IAAMC,EAAY,uCAAG,WAAO3D,GAAP,eAAAwB,EAAA,+EAEPC,GAAoBzB,GAFb,OAGP4D,EAAuBN,EAAkBO,QAAO,SAACjE,GAAD,OAAUA,EAAKkE,MAAQ9D,KAC7EuD,EAAqBK,GACrBJ,GAAS,GALI,gDAObA,GAAS,GAPI,yDAAH,sDAWlB,OACI,oCACKjB,EAAS,kBAACV,GAAA,EAAD,CACNC,SAAS,SADH,gFAIE,KACZ,kBAACiC,GAAA,EAAD,CAAgB1F,UAAWsD,KACvB,kBAACqC,GAAA,EAAD,CAAOzG,UAAWP,EAAQoG,MAAOzH,aAAW,gBACxC,kBAACsI,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,aACA,kBAACA,GAAA,EAAD,cACA,kBAACA,GAAA,EAAD,sBACA,kBAACA,GAAA,EAAD,sBAGR,kBAACC,GAAA,EAAD,KACKd,EAAiB,OACbA,QADa,IACbA,OADa,EACbA,EAAmBe,KAAI,SAACC,GAAD,OACpB,kBAACJ,GAAA,EAAD,CAAUK,IAAKD,EAAIzD,MACf,kBAACsD,GAAA,EAAD,KAAYG,EAAIzD,MAChB,kBAACsD,GAAA,EAAD,KAAYG,EAAIvD,OAChB,kBAACoD,GAAA,EAAD,KAAYG,EAAItD,WAChB,kBAACmD,GAAA,EAAD,KACI,kBAACzG,EAAA,EAAD,CACI3B,QAAQ,YACRL,MAAM,UACN6B,UAAWP,EAAQuD,IACnB3E,QAAS,WACLkB,EAAQyB,KAAK,CACTiG,SAAU,oBACVC,MAAO,CAAE7E,KAAM0E,OAP3B,UAcA,kBAAC5G,EAAA,EAAD,CACI3B,QAAQ,YACRL,MAAM,YACNE,QAAS,kBAAM+H,EAAaW,EAAIR,OAHpC,gBASN,mDCzFlC,IAAM3H,GAAYC,YAAW,CACzB+D,UAAW,CACP7D,MAAO,MACPmC,QAAS,OACT2B,cAAe,SACfC,QAAS,QAEbC,MAAO,CACH7D,UAAW,QAEf8D,IAAK,CACD9D,UAAW,QAEf+D,MAAO,CACHC,aAAc,UAIhBC,GAAiBC,OAAaC,MAAM,CACtCC,KAAMF,OAAaG,SAAS,wBAC5BC,MAAOJ,OAAaI,MAAM,qBAAkBD,SAAS,wBACrDE,UAAWL,OAAaG,SAAS,0BAGtB,SAASG,KACpB,IAAMjE,EAAUb,KACVW,EAAUC,cACV2H,EAAWC,cAHsB,EAIX1H,oBAAS,GAJE,mBAIhCiE,EAJgC,KAIxBC,EAJwB,OAKDlE,oBAAS,GALR,mBAKhCmE,EALgC,KAKnBC,EALmB,KAMjCuD,EAAeF,EAASD,MAAM7E,KAE9B0B,EAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,+EAEHC,GAAkBmD,EAAad,IAAIvC,GAFhC,OAGTF,GAAe,GACfF,GAAU,GACVO,YAAW,kBAAM5E,EAAQyB,KAAK,mBAAkB,KALvC,gDAQT8C,GAAe,GARN,yDAAH,sDAWd,OACI,oCACI,kBAACM,EAAA,EAAD,CAAOC,UAAW,EAAGrE,UAAWP,EAAQmD,WACnCe,EACG,kBAACW,GAAA,EAAD,CACIC,SAAS,UACTvE,UAAWP,EAAQwD,OAFvB,iCAIE,KACLY,EACG,kBAACS,GAAA,EAAD,CACIC,SAAS,QACTvE,UAAWP,EAAQwD,OAFvB,gFAKE,KACN,kBAAC1E,EAAA,EAAD,CAAYC,QAAQ,MAApB,mBACA,kBAAC,KAAD,CACIgG,cAAe,CACXlB,KAAM+D,EAAa/D,KACnBE,MAAO6D,EAAa7D,MACpBC,UAAW4D,EAAa5D,WAE5BgB,iBAAkBtB,GAClBY,SAAUA,IAET,gBAAGW,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,WAAYC,EAA7B,EAA6BA,aAAcZ,EAA3C,EAA2CA,OAAQa,EAAnD,EAAmDA,OAAQC,EAA3D,EAA2DA,QAA3D,OACG,oCACI,kBAACC,GAAA,EAAD,CACIC,SAAOH,EAAOvB,OAAQwB,EAAQxB,MAC9Bb,GAAG,OACHwC,MAAM,OACNjF,UAAWP,EAAQsD,MACnBmC,SAAUR,EACVS,OAAQR,EACRS,MAAOpB,EAAOV,KACd+B,WACIR,EAAOvB,MAAQwB,EAAQxB,KACnBuB,EAAOvB,KACP,OAGZ,kBAACyB,GAAA,EAAD,CACIC,SAAOH,EAAOrB,QAASsB,EAAQtB,OAC/Bf,GAAG,QACHwC,MAAM,SACNjF,UAAWP,EAAQsD,MACnBmC,SAAUR,EACVS,OAAQR,EACRS,MAAOpB,EAAOR,MACd6B,WACIR,EAAOrB,OAASsB,EAAQtB,MACpBqB,EAAOrB,MACP,OAGZ,kBAAC8B,GAAA,EAAD,CAAatF,UAAWP,EAAQsD,MAC5BiC,SAAOH,EAAOpB,YAAaqB,EAAQrB,YACnC,kBAAC8B,GAAA,EAAD,CAAY9C,GAAG,aAAf,iBACA,kBAAC+C,GAAA,EAAD,CACI/C,GAAG,YACH2C,MAAOpB,EAAOP,UACdyB,SAAUR,EACVS,OAAQR,GAER,4BAAQvG,aAAW,OAAOgH,MAAM,KAChC,4BAAQA,MAAO,iBAAf,iBACA,4BAAQA,MAAO,aAAf,gBACA,4BAAQA,MAAO,kBAAf,mBAEJ,kBAACK,GAAA,EAAD,KAEQZ,EAAOpB,WAAaqB,EAAQrB,UACxBoB,EAAOpB,UACP,OAIhB,kBAACtD,EAAA,EAAD,CACI3B,QAAQ,YACRL,MAAM,YACN6B,UAAWP,EAAQuD,IACnB3E,QAASuG,GAJb,gBC5H5B,IAAMhG,GAAYC,YAAW,CACzB+D,UAAW,CACP7D,MAAO,MACPmC,QAAS,OACT2B,cAAe,SACfC,QAAS,QAEbC,MAAO,CACH7D,UAAW,QAEf8D,IAAK,CACD9D,UAAW,QAEf+D,MAAO,CACHC,aAAc,UAIhBC,GAAiBC,OAAaC,MAAM,CACtCC,KAAMF,OAAaG,SAAS,wBAC5BC,MAAOJ,OAAaI,MAAM,qBAAkBD,SAAS,wBACrD+D,IAAKlE,OAAaG,SAAS,0BAC3BgE,OAAQnE,OAAaG,SAAS,wBAC9BiE,IAAKpE,OAAaqE,SAAS,kBAAkBC,QAAQ,sBAG1C,SAASC,KACpB,IAAMlI,EAAUb,KADkB,GAElBY,cACYE,oBAAS,IAHH,mBAG3BiE,EAH2B,KAGnBC,EAHmB,OAIIlE,oBAAS,GAJb,mBAI3BmE,EAJ2B,KAIdC,EAJc,KAM5BC,EAAQ,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sDACb,IAC4C,OAArC2D,aAAaC,QAAQ,YACpBD,aAAaE,QAAQ,WAAW,QAG1BC,EAAWC,KAAKC,MAAML,aAAaC,QAAQ,cACxC7G,KAAKgD,GACd4D,aAAaE,QAAQ,WAAWE,KAAKE,UAAUH,IAE/CjE,GAAe,GACfF,GAAU,IAIlB,MAAOuE,GACHrE,GAAe,GAhBN,2CAAH,sDAmBd,OACI,oCACI,kBAACM,EAAA,EAAD,CAAOC,UAAW,EAAGrE,UAAWP,EAAQmD,WACnCe,EACG,kBAACW,GAAA,EAAD,CACIC,SAAS,UACTvE,UAAWP,EAAQwD,OAFvB,mCAIE,KACLY,EACG,kBAACS,GAAA,EAAD,CACIC,SAAS,QACTvE,UAAWP,EAAQwD,OAFvB,gFAKE,KACN,kBAAC1E,EAAA,EAAD,CAAYC,QAAQ,MAApB,2BACA,kBAAC,KAAD,CACIgG,cAAe,CACXlB,KAAM,GACNE,MAAO,GACP8D,IAAK,GACLC,OAAQ,GACRC,IAAK,IAET/C,iBAAkBtB,GAClBY,SAAUA,IAET,gBAAGW,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,WAAYC,EAA7B,EAA6BA,aAAcZ,EAA3C,EAA2CA,OAAQa,EAAnD,EAAmDA,OAAQC,EAA3D,EAA2DA,QAA3D,OACG,oCACI,kBAACC,GAAA,EAAD,CACIC,SAAOH,EAAOvB,OAAQwB,EAAQxB,MAC9Bb,GAAG,OACHwC,MAAM,OACNjF,UAAWP,EAAQsD,MACnBmC,SAAUR,EACVS,OAAQR,EACRS,MAAOpB,EAAOV,KACd+B,WACIR,EAAOvB,MAAQwB,EAAQxB,KACnBuB,EAAOvB,KACP,OAGZ,kBAACyB,GAAA,EAAD,CACIC,SAAOH,EAAOrB,QAASsB,EAAQtB,OAC/Bf,GAAG,QACHwC,MAAM,SACNjF,UAAWP,EAAQsD,MACnBmC,SAAUR,EACVS,OAAQR,EACRS,MAAOpB,EAAOR,MACd6B,WACIR,EAAOrB,OAASsB,EAAQtB,MACpBqB,EAAOrB,MACP,OAGZ,kBAACuB,GAAA,EAAD,CACIC,SAAOH,EAAOyC,MAAOxC,EAAQwC,KAC7B7E,GAAG,MACHwC,MAAM,MACNjF,UAAWP,EAAQsD,MACnBmC,SAAUR,EACVS,OAAQR,EACRS,MAAOpB,EAAOsD,IACdjC,WACIR,EAAOyC,KAAOxC,EAAQwC,IAClBzC,EAAOyC,IACP,OAGZ,kBAAChC,GAAA,EAAD,CAAatF,UAAWP,EAAQsD,MAC5BiC,SAAOH,EAAO0C,SAAUzC,EAAQyC,SAChC,kBAAChC,GAAA,EAAD,CAAY9C,GAAG,UAAf,QACA,kBAAC+C,GAAA,EAAD,CACI/C,GAAG,SACH2C,MAAOpB,EAAOuD,OACdrC,SAAUR,EACVS,OAAQR,GAER,4BAAQvG,aAAW,OAAOgH,MAAM,KAChC,4BAAQA,MAAO,aAAf,aACA,4BAAQA,MAAO,YAAf,aAEJ,kBAACK,GAAA,EAAD,KAEQZ,EAAO0C,QAAUzC,EAAQyC,OACrB1C,EAAO0C,OACP,OAIhB,kBAACxC,GAAA,EAAD,CACIC,SAAOH,EAAO2C,MAAO1C,EAAQ0C,KAC7B/E,GAAG,MACHwC,MAAM,QACNjF,UAAWP,EAAQsD,MACnBmC,SAAUR,EACVS,OAAQR,EACRS,MAAOpB,EAAOwD,IACdnC,WACIR,EAAO2C,KAAO1C,EAAQ0C,IAClB3C,EAAO2C,IACP,OAKZ,kBAACrH,EAAA,EAAD,CACI3B,QAAQ,YACRL,MAAM,YACN6B,UAAWP,EAAQuD,IACnB3E,QAASuG,GAJb,mBChK5B,IAAMhG,GAAYC,YAAW,CACzB6G,aAAc,CACVxG,UAAW,QACXgC,QAAS,OACT2B,cAAe,SACf8C,WAAY,UAEhB3C,IAAK,CACD4C,YAAa,QAEjBC,MAAO,CACH9G,MAAO,UAIA,SAASqJ,KACpB,IAAM3I,EAAUb,KACVW,EAAUC,cAFqB,EAGCE,mBAASsI,KAAKC,MAAML,aAAaC,QAAQ,cAH1C,mBAG9BQ,EAH8B,KAGjBC,EAHiB,OAIX5I,oBAAS,GAJE,mBAI9BsF,EAJ8B,KAIvBiB,EAJuB,KAkB/BG,EAAY,uCAAG,WAAO5C,GAAP,eAAAS,EAAA,sDACjB,IAKUsE,EAAkBF,EAAY/B,QAAO,SAACjE,GAAD,OAAUA,EAAKmB,QAAUA,KACpE8E,EAAeC,GACftC,GAAS,GACT2B,aAAaE,QAAQ,WAAWE,KAAKE,UAAUK,IACjD,MAAOvD,GACLiB,GAAS,GAXI,2CAAH,sDAelB,OACI,oCACKjB,EAAS,kBAACV,GAAA,EAAD,CACNC,SAAS,SADH,gFAIE,KACZ,kBAACiC,GAAA,EAAD,CAAgB1F,UAAWsD,KACvB,kBAACqC,GAAA,EAAD,CAAOzG,UAAWP,EAAQoG,MAAOzH,aAAW,gBACxC,kBAACsI,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,aACA,kBAACA,GAAA,EAAD,cACA,kBAACA,GAAA,EAAD,YACA,kBAACA,GAAA,EAAD,eACA,kBAACA,GAAA,EAAD,YACA,kBAACA,GAAA,EAAD,sBAGR,kBAACC,GAAA,EAAD,KACKwB,EAAW,OACPA,QADO,IACPA,OADO,EACPA,EAAavB,KAAI,SAACC,GAAD,OACd,kBAACJ,GAAA,EAAD,CAAUK,IAAKD,EAAIzD,MACf,kBAACsD,GAAA,EAAD,KAAYG,EAAIzD,MAChB,kBAACsD,GAAA,EAAD,KAAYG,EAAIvD,OAChB,kBAACoD,GAAA,EAAD,KAAYG,EAAIO,KAChB,kBAACV,GAAA,EAAD,KAAYG,EAAIQ,QAChB,kBAACX,GAAA,EAAD,KAAYG,EAAIS,KAChB,kBAACZ,GAAA,EAAD,KACI,kBAACzG,EAAA,EAAD,CACI3B,QAAQ,YACRL,MAAM,UACN6B,UAAWP,EAAQuD,IACnB3E,QAAS,WACLkB,EAAQyB,KAAK,CACTiG,SAAU,gBACVC,MAAO,CAAE7E,KAAM0E,OAP3B,UAcA,kBAAC5G,EAAA,EAAD,CACI3B,QAAQ,YACRL,MAAM,YACN6B,UAAWP,EAAQuD,IACnB3E,QAAS,kBAAM+H,EAAaW,EAAIvD,SAJpC,WAQA,kBAACrD,EAAA,EAAD,CACI3B,QAAQ,YACRwB,UAAWP,EAAQuD,IACnB3E,QAAS,kBAAMkB,EAAQyB,KAAK,uBAHhC,uBASN,mDC5GlC,IAAMpC,GAAYC,YAAW,CACzB+D,UAAW,CACP7D,MAAO,MACPmC,QAAS,OACT2B,cAAe,SACfC,QAAS,QAEbC,MAAO,CACH7D,UAAW,QAEf8D,IAAK,CACD9D,UAAW,QAEf+D,MAAO,CACHC,aAAc,UAIhBC,GAAiBC,OAAaC,MAAM,CACtCC,KAAMF,OAAaG,SAAS,wBAC5BC,MAAOJ,OAAaI,MAAM,qBAAkBD,SAAS,wBACrD+D,IAAKlE,OAAaG,SAAS,0BAC3BgE,OAAQnE,OAAaG,SAAS,wBAC9BiE,IAAKpE,OAAaqE,SAAS,kBAAkBC,QAAQ,sBAG1C,SAASC,KACpB,IAAMlI,EAAUb,KAEVuI,GADU3H,cACC4H,eAHiB,EAIN1H,oBAAS,GAJH,mBAI3BiE,EAJ2B,KAInBC,EAJmB,OAKIlE,oBAAS,GALb,mBAK3BmE,EAL2B,KAKdC,EALc,KAM5B0E,EAAUrB,EAASD,MAAM7E,KAGzB0B,EAAQ,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sDACb,IACU8D,EAAWC,KAAKC,MAAML,aAAaC,QAAQ,cAC3CU,EAAkBR,EAASzB,QAAO,SAAAmC,GAAI,OAAIA,EAAKjF,QAAUgF,EAAQhF,UACvDxC,KAAKgD,GACrB4D,aAAaE,QAAQ,WAAYE,KAAKE,UAAUK,IAEhDzE,GAAe,GACfF,GAAU,GAGd,MAAOuE,GACHrE,GAAe,GAZN,2CAAH,sDAgBd,OACI,oCACI,kBAACM,EAAA,EAAD,CAAOC,UAAW,EAAGrE,UAAWP,EAAQmD,WACnCe,EACG,kBAACW,GAAA,EAAD,CACIC,SAAS,UACTvE,UAAWP,EAAQwD,OAFvB,mCAIE,KACLY,EACG,kBAACS,GAAA,EAAD,CACIC,SAAS,QACTvE,UAAWP,EAAQwD,OAFvB,gFAKE,KACN,kBAAC1E,EAAA,EAAD,CAAYC,QAAQ,MAApB,mBACA,kBAAC,KAAD,CACIgG,cAAe,CACXlB,KAAMkF,EAAQlF,KACdE,MAAOgF,EAAQhF,MACf8D,IAAKkB,EAAQlB,IACbC,OAAQiB,EAAQjB,OAChBC,IAAKgB,EAAQhB,KAEjB/C,iBAAkBtB,GAClBY,SAAUA,IAET,gBAAGW,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,WAAYC,EAA7B,EAA6BA,aAAcZ,EAA3C,EAA2CA,OAAQa,EAAnD,EAAmDA,OAAQC,EAA3D,EAA2DA,QAA3D,OACG,oCACI,kBAACC,GAAA,EAAD,CACIC,SAAOH,EAAOvB,OAAQwB,EAAQxB,MAC9Bb,GAAG,OACHwC,MAAM,OACNjF,UAAWP,EAAQsD,MACnBmC,SAAUR,EACVS,OAAQR,EACRS,MAAOpB,EAAOV,KACd+B,WACIR,EAAOvB,MAAQwB,EAAQxB,KACnBuB,EAAOvB,KACP,OAGZ,kBAACyB,GAAA,EAAD,CACIC,SAAOH,EAAOrB,QAASsB,EAAQtB,OAC/Bf,GAAG,QACHwC,MAAM,SACNjF,UAAWP,EAAQsD,MACnBmC,SAAUR,EACVS,OAAQR,EACRS,MAAOpB,EAAOR,MACd6B,WACIR,EAAOrB,OAASsB,EAAQtB,MACpBqB,EAAOrB,MACP,OAGZ,kBAACuB,GAAA,EAAD,CACIC,SAAOH,EAAOyC,MAAOxC,EAAQwC,KAC7B7E,GAAG,MACHwC,MAAM,MACNjF,UAAWP,EAAQsD,MACnBmC,SAAUR,EACVS,OAAQR,EACRS,MAAOpB,EAAOsD,IACdjC,WACIR,EAAOyC,KAAOxC,EAAQwC,IAClBzC,EAAOyC,IACP,OAGZ,kBAAChC,GAAA,EAAD,CAAatF,UAAWP,EAAQsD,MAC5BiC,SAAOH,EAAO0C,SAAUzC,EAAQyC,SAChC,kBAAChC,GAAA,EAAD,CAAY9C,GAAG,UAAf,QACA,kBAAC+C,GAAA,EAAD,CACI/C,GAAG,SACH2C,MAAOpB,EAAOuD,OACdrC,SAAUR,EACVS,OAAQR,GAER,4BAAQvG,aAAW,OAAOgH,MAAM,KAChC,4BAAQA,MAAO,aAAf,aACA,4BAAQA,MAAO,YAAf,aAEJ,kBAACK,GAAA,EAAD,KAEQZ,EAAO0C,QAAUzC,EAAQyC,OACrB1C,EAAO0C,OACP,OAIhB,kBAACxC,GAAA,EAAD,CACIC,SAAOH,EAAO2C,MAAO1C,EAAQ0C,KAC7B/E,GAAG,MACHwC,MAAM,QACNjF,UAAWP,EAAQsD,MACnBmC,SAAUR,EACVS,OAAQR,EACRS,MAAOpB,EAAOwD,IACdnC,WACIR,EAAO2C,KAAO1C,EAAQ0C,IAClB3C,EAAO2C,IACP,OAKZ,kBAACrH,EAAA,EAAD,CACI3B,QAAQ,YACRL,MAAM,YACN6B,UAAWP,EAAQuD,IACnB3E,QAASuG,GAJb,gB,0ECpKtBhG,GAAYC,YAAW,CAC3BqB,MAAO,CACL4C,QAAS,cAIE,SAAS4F,KACtB,IAAMjJ,EAAUb,KAEhB,OACE,kBAAC+J,GAAA,EAAD,CAAUC,MAAM,aACd,kBAACC,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,KACE,kBAACvK,EAAA,EAAD,CAAYC,QAAQ,QAAQL,MAAM,iBAAlC,YAIF,kBAAC4K,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,MACA,kBAACC,GAAA,EAAD,OAEF,kBAACC,GAAA,EAAD,KACE,kBAAC9E,EAAA,EAAD,CAAOC,UAAW,EAAGrE,UAAWP,EAAQS,OACtC,kBAAC3B,EAAA,EAAD,iCAIN,kBAACsK,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,KACE,kBAACvK,EAAA,EAAD,CAAYC,QAAQ,QAAQL,MAAM,iBAAlC,aAIF,kBAAC4K,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,OAEF,kBAACE,GAAA,EAAD,KACE,kBAAC9E,EAAA,EAAD,CAAOC,UAAW,EAAGrE,UAAWP,EAAQS,OACtC,kBAAC3B,EAAA,EAAD,mCCnCG,SAAS4K,KACpB,OACI,kBAAC,IAAD,CAAQC,SAAUC,iCACd,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KACd,kBAAClI,EAAD,OAEJ,kBAAC,IAAD,CAAOiI,OAAK,EAACC,KAAK,qBACd,kBAAClI,EAAD,CAAKP,UAAW,kBAAC4C,GAAD,SAEpB,kBAAC,IAAD,CAAO4F,OAAK,EAACC,KAAK,iBACd,kBAAClI,EAAD,CAAKP,UAAW,kBAACgF,GAAD,SAEpB,kBAAC,IAAD,CAAOwD,OAAK,EAACC,KAAK,sBACd,kBAAClI,EAAD,CAAKP,UAAW,kBAAC,GAAD,SAEpB,kBAAC,IAAD,CAAOwI,OAAK,EAACC,KAAK,iBACd,kBAAClI,EAAD,CAAKP,UAAW,kBAAC6G,GAAD,SAEpB,kBAAC,IAAD,CAAO2B,OAAK,EAACC,KAAK,kBACd,kBAAClI,EAAD,CAAKP,UAAW,kBAAC,GAAD,SAEpB,kBAAC,IAAD,CAAOwI,OAAK,EAACC,KAAK,aACd,kBAAClI,EAAD,CAAKP,UAAW,kBAACsH,GAAD,SAEpB,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,sBACd,kBAAClI,EAAD,CAAKP,UAAW,kBAAC4H,GAAD,WCpCpCc,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.ac9db4dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/medical.9c7b7954.png\";","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    palette: {\n        secondary: {\n            light: '#f6685e',\n            main: '#f44336',\n            dark: '#aa2e25'\n        },\n        primary: {\n            light: '#637bfe',\n            main: '#2196f3',\n            dark: '#2a3eb1'\n        },\n    },\n})\n\nexport default theme","export default {\n    sideBarWidth: '240px'\n}","/* eslint-disable react/prop-types */\nimport React from 'react'\nimport {\n    AppBar,\n    Toolbar,\n    IconButton,\n    Typography,\n} from '@material-ui/core'\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {Link} from 'react-router-dom';\n\nexport default function Navbar(props) {\n    return (\n        <AppBar position=\"fixed\">\n            <Toolbar>\n                {props.mobile ? (\n                    <IconButton\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                        onClick={props.openSideBar}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                ):null}\n                <Typography variant=\"h6\">\n                    <Link to='/' style={{textDecoration: 'none', color: 'inherit'}}>\n                    Hemovigilância\n                    </Link>\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    )\n}\n","/* eslint-disable react/prop-types */\nimport React, { useState } from 'react'\nimport {\n    makeStyles,\n    Drawer,\n    Button,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Collapse\n} from '@material-ui/core'\n//icones\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\nimport PersonIcon from '@material-ui/icons/Person';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\nimport ListIcon from '@material-ui/icons/List';\n\nimport Constants from '../../utils/Constants'\nimport { useHistory } from \"react-router-dom\";\n\nconst useStyles = makeStyles({\n    drawer: {\n        width: Constants.sideBarWidth,\n    },\n    drawerPaper_desktop: {\n        width: Constants.sideBarWidth,\n        marginTop: '64px'\n    },\n    drawerPaper_mobile: {\n        width: Constants.sideBarWidth\n    },\n    nested: {\n        marginLeft: '10px'\n    }\n})\n\nexport default function Sidebar(props) {\n    const history = useHistory()\n    const classes = useStyles()\n    const [openOptionsEmployee, setOpenOptionsEmployee] = useState(false)\n    const [openOptionsPatient, setOpenOptionsPatient] = useState(false)\n\n    const handleClickEmployeeItem = () => {\n        setOpenOptionsEmployee(openOptionsEmployee => !openOptionsEmployee)\n    }\n\n    const handleClickPatientItem = () => {\n        setOpenOptionsPatient(openOptionsPatient => !openOptionsPatient)\n    }\n\n    return (\n        <Drawer\n            className={classes.drawer}\n            open={props.mobile ? props.open : true}\n            variant={props.mobile ? \"temporary\" : \"permanent\"}\n            classes={props.mobile ? ({\n                paper: classes.drawerPaper_mobile,\n            }) : { paper: classes.drawerPaper_desktop }}\n        >\n            <div>\n                {props.mobile ? (\n                    <Button onClick={props.closeSideBar}>Fechar</Button>\n                ) : null}\n                <List>\n                    <ListItem button onClick={handleClickEmployeeItem}>\n                        <ListItemIcon>\n                            <LocalHospitalIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Profissonais de saúde\" />\n                        {openOptionsEmployee ? <ExpandLess /> : <ExpandMore />}\n                    </ListItem>\n                    <Collapse in={openOptionsEmployee} timeout=\"auto\" unmountOnExit>\n                        <List component=\"div\" disablePadding>\n                            <ListItem button \n                                className={classes.nested}\n                                onClick={() => {\n                                    history.push('/professional/add')\n                                    props.closeSideBar()\n                                }}\n                            >\n                                <ListItemIcon>\n                                    <PersonAddIcon />\n                                </ListItemIcon>\n                                <ListItemText primary=\"Adicionar\" />\n                            </ListItem>\n                            <ListItem button \n                                className={classes.nested}\n                                onClick={() => {\n                                    history.push('/professional')\n                                    props.closeSideBar()\n                                }\n                                }\n                            >\n                                <ListItemIcon>\n                                    <ListIcon />\n                                </ListItemIcon>\n                                <ListItemText primary=\"Gerenciar\" />\n                            </ListItem>\n                        </List>\n                    </Collapse>\n                    <ListItem button onClick={handleClickPatientItem}>\n                        <ListItemIcon>\n                            <PersonIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Pacientes\" />\n                        {openOptionsPatient ? <ExpandLess /> : <ExpandMore />}\n                    </ListItem>\n                    <Collapse in={openOptionsPatient} timeout=\"auto\" unmountOnExit>\n                        <List component=\"div\" disablePadding>\n                            <ListItem button \n                                className={classes.nested}\n                                onClick={() => {\n                                    history.push('/patients/add')\n                                    props.closeSideBar()\n                                }}\n                            >\n                                <ListItemIcon>\n                                    <PersonAddIcon />\n                                </ListItemIcon>\n                                <ListItemText primary=\"Adicionar\" />\n                            </ListItem>\n                            <ListItem button \n                                className={classes.nested}\n                                onClick={() => {\n                                    history.push('/patients')\n                                    props.closeSideBar()\n                                }\n                                }\n                            >\n                                <ListItemIcon>\n                                    <ListIcon />\n                                </ListItemIcon>\n                                <ListItemText primary=\"Gerenciar\" />\n                            </ListItem>\n                        </List>\n                    </Collapse>\n                </List>\n            </div>\n        </Drawer>\n    )\n}\n","/* eslint-disable react/prop-types */\nimport React, { useState } from 'react'\nimport {\n  CssBaseline,\n  makeStyles,\n  Container,\n  ThemeProvider,\n  useMediaQuery\n} from '@material-ui/core'\nimport theme from './utils/customTheme'\nimport Constants from './utils/Constants'\n\n//Components\nimport Navbar from './components/Navbar'\nimport Sidebar from './components/Sidebar'\n\n//IMG\nimport banner from './img/medical.png'\n\nconst useStyles = makeStyles({\n  main_mobile:{\n    display: 'flex',\n    justifyContent: 'center',\n    marginTop: '100px'\n  },\n  main_desktop:{\n    width: `calc(100% - ${Constants.sideBarWidth})`,\n    marginLeft: Constants.sideBarWidth,\n    display: 'flex',\n    justifyContent: 'center',\n    marginTop: '100px'\n  }\n});\n\nexport default function App(props) {\n  const classes = useStyles();\n  const [sideBar, setSideBar] = useState(false)\n  const mobileMatches = useMediaQuery('(max-width:780px)');\n\n  const openSideBar = () => {\n    setSideBar(true)\n  }\n\n  const closeSideBar = () => {\n    setSideBar(false)\n  }\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Navbar openSideBar={openSideBar} mobile={mobileMatches}/>\n      <Sidebar open={sideBar} closeSideBar={closeSideBar} mobile={mobileMatches} />\n      <main>\n        <Container className={mobileMatches ? classes.main_mobile : classes.main_desktop}>\n          {props.component ? props.component : (<img src={banner} style={{maxWidth: '70%',height: 'auto'}} />)}\n        </Container>\n      </main>\n    </ThemeProvider>\n  );\n}","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://hemovigiliancia--api.herokuapp.com/api',\n});\n\nexport default api;","import api from './index'\n\nexport default {\n    async register(data) {\n        const response = await api.post(\"/professionals\", data)\n        return response\n    },\n    async getAll() {\n        const response = await api.get(\"/professionals\")\n        return response\n    },\n    async getProfessional(id) {\n        const response = await api.get(`/professionals/${id}`)\n        return response\n    },\n    async edit(id, data) {\n        const response = await api.put(`/professionals/${id}`, data)\n        return response\n    },\n    async delete(id) {\n        const response = await api.delete(`/professionals/${id}`)\n        return response\n    }\n}","import React, { useState } from 'react'\nimport {\n    makeStyles,\n    Typography,\n    Paper,\n    TextField,\n    FormControl,\n    InputLabel,\n    FormHelperText,\n    NativeSelect,\n    Button,\n} from '@material-ui/core/'\nimport { Alert } from '@material-ui/lab'\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useHistory } from 'react-router-dom';\nimport Professional from '../../services/Professional'\nconst useStyles = makeStyles({\n    main_card: {\n        width: '80%',\n        display: 'flex',\n        flexDirection: 'column',\n        padding: '30px'\n    },\n    input: {\n        marginTop: '15px'\n    },\n    btn: {\n        marginTop: '10px'\n    },\n    alert: {\n        marginBottom: '20px',\n    }\n})\n\nconst RegisterSchema = Yup.object().shape({\n    name: Yup.string().required('Campo Obrigatório'),\n    email: Yup.string().email('Email inválido').required('Campo obrigatório'),\n    operation: Yup.string().required('Campo Obrigatório'),\n});\n\nexport default function ProfessionalForm() {\n    const classes = useStyles()\n    const history = useHistory()\n    const [submit, setSubmit] = useState(false)\n    const [submitError, setSubmitError] = useState(false)\n\n    const onSubmit = async (values) => {\n        try {\n            await Professional.register(values)\n            setSubmitError(false)\n            setSubmit(true)\n            setTimeout(() => history.push(\"/professional\"), 2000)\n        }\n        catch (err) {\n            setSubmitError(true)\n        }\n    }\n    return (\n        <>\n            <Paper elevation={3} className={classes.main_card}>\n                {submit ? (\n                    <Alert\n                        severity=\"success\"\n                        className={classes.alert}>Cadastro realizado com sucesso!\n                    </Alert>)\n                    : null}\n                {submitError ? (\n                    <Alert\n                        severity=\"error\"\n                        className={classes.alert}>Ocorreu um problema ao tentar se comunicar com o servidor\n                        , tente novamente!\n                    </Alert>)\n                    : null}\n                <Typography variant='h6'>Adicionar novo profissional</Typography>\n                <Formik\n                    initialValues={{\n                        name: '',\n                        email: '',\n                        operation: ''\n                    }}\n                    validationSchema={RegisterSchema}\n                    onSubmit={onSubmit}\n                >\n                    {({ handleChange, handleBlur, handleSubmit, values, errors, touched }) => (\n                        <>\n                            <TextField\n                                error={errors.name && touched.name ? true : false}\n                                id=\"name\"\n                                label=\"Nome\"\n                                className={classes.input}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.name}\n                                helperText={\n                                    errors.name && touched.name ? (\n                                        errors.name\n                                    ) : null\n                                }\n                            />\n                            <TextField\n                                error={errors.email && touched.email ? true : false}\n                                id=\"email\"\n                                label=\"E-mail\"\n                                className={classes.input}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.email}\n                                helperText={\n                                    errors.email && touched.email ? (\n                                        errors.email\n                                    ) : null\n                                }\n                            />\n                            <FormControl className={classes.input}\n                                error={errors.operation && touched.operation ? true : false}>\n                                <InputLabel id=\"operation\">Atuação</InputLabel>\n                                <NativeSelect\n                                    id=\"operation\"\n                                    value={values.operation}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                >\n                                    <option aria-label=\"None\" value=\"\" />\n                                    <option value={'Enfermeiro(a)'}>Enfermeiro(a)</option>\n                                    <option value={'Medico(a)'}>Médico(a)</option>\n                                    <option value={'Administrativo'}>Administrativo</option>\n                                </NativeSelect>\n                                <FormHelperText>\n                                    {\n                                        errors.operation && touched.operation ? (\n                                            errors.operation\n                                        ) : null\n                                    }\n                                </FormHelperText>\n                            </FormControl>\n                            <Button\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                className={classes.btn}\n                                onClick={handleSubmit}\n                            >\n                                Registrar\n                            </Button>\n                        </>\n                    )}\n                </Formik>\n            </Paper>\n        </>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport {\n    makeStyles,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n    Paper,\n    Button,\n} from '@material-ui/core/'\nimport { Alert } from '@material-ui/lab'\nimport Professional from '../../services/Professional'\nimport { useHistory } from 'react-router-dom';\n\nconst useStyles = makeStyles({\n    main_content: {\n        marginTop: '100px',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    btn: {\n        marginRight: '10px'\n    },\n    table: {\n        width: '100%'\n    }\n})\n\nexport default function ProfessionalManager() {\n    const classes = useStyles()\n    const history = useHistory()\n    const [professionalsData, setProfessionalsData] = useState()\n    const [error, setError] = useState(false)\n\n    useEffect(() => {\n        async function fetchApi() {\n            try {\n                const response = await Professional.getAll()\n                setProfessionalsData(response.data)\n            } catch (err) {\n                setError(true)\n            }\n        }\n        fetchApi()\n    }, [])\n\n    const handleDelete = async (id) => {\n        try {\n            await Professional.delete(id)\n            const updatedProfessionals = professionalsData.filter((data) => data._id !== id)\n            setProfessionalsData(updatedProfessionals)\n            setError(false)\n        } catch (error) {\n            setError(true)\n        }\n    }\n\n    return (\n        <>\n            {error ? (<Alert\n                severity=\"error\">\n                Ocorreu um problema ao tentar se comunicar com o servidor\n                , tente novamente!\n            </Alert>) : null}\n            <TableContainer component={Paper}>\n                <Table className={classes.table} aria-label=\"simple table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Nome</TableCell>\n                            <TableCell>Email</TableCell>\n                            <TableCell>Atuação</TableCell>\n                            <TableCell>Ações</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {professionalsData ? \n                            (professionalsData?.map((row) => (\n                                <TableRow key={row.name}>\n                                    <TableCell>{row.name}</TableCell>\n                                    <TableCell>{row.email}</TableCell>\n                                    <TableCell>{row.operation}</TableCell>\n                                    <TableCell>\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            className={classes.btn}\n                                            onClick={() => {\n                                                history.push({\n                                                    pathname: \"professional/edit\",\n                                                    state: { data: row }\n                                                })\n                                            }\n                                            }\n                                        >\n                                            Editar\n                                            </Button>\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"secondary\"\n                                            onClick={() => handleDelete(row._id)}\n                                        >\n                                            Excluir\n                                            </Button>\n                                    </TableCell>\n                                </TableRow>\n                            ))) : <span>Carregando...</span> }\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </>\n    )\n}\n","/* eslint-disable react/prop-types */\nimport React, {useState} from 'react'\nimport {\n    makeStyles,\n    Typography,\n    Paper,\n    TextField,\n    FormControl,\n    InputLabel,\n    FormHelperText,\n    NativeSelect,\n    Button,\n} from '@material-ui/core/'\nimport { Alert } from '@material-ui/lab'\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport {useHistory,useLocation} from 'react-router-dom';\nimport Professional from '../../services/Professional'\n\nconst useStyles = makeStyles({\n    main_card: {\n        width: '80%',\n        display: 'flex',\n        flexDirection: 'column',\n        padding: '30px'\n    },\n    input: {\n        marginTop: '15px'\n    },\n    btn: {\n        marginTop: '10px'\n    },\n    alert: {\n        marginBottom: '20px',\n    }\n})\n\nconst RegisterSchema = Yup.object().shape({\n    name: Yup.string().required('Campo Obrigatório'),\n    email: Yup.string().email('Email inválido').required('Campo obrigatório'),\n    operation: Yup.string().required('Campo Obrigatório'),\n});\n\nexport default function ProfessionalForm() {\n    const classes = useStyles()\n    const history = useHistory()\n    const location = useLocation()\n    const [submit, setSubmit] = useState(false)\n    const [submitError, setSubmitError] = useState(false)\n    const professional = location.state.data\n\n    const onSubmit = async (values) => {\n        try {\n            await Professional.edit(professional._id,values)\n            setSubmitError(false)\n            setSubmit(true)\n            setTimeout(() => history.push(\"/professional\"), 1000)\n        }\n        catch (err) {\n            setSubmitError(true)\n        }\n    }\n    return (\n        <>\n            <Paper elevation={3} className={classes.main_card}>\n                {submit ? (\n                    <Alert\n                        severity=\"success\"\n                        className={classes.alert}>Cadastro editado com sucesso!\n                    </Alert>)\n                    : null}\n                {submitError ? (\n                    <Alert\n                        severity=\"error\"\n                        className={classes.alert}>Ocorreu um problema ao tentar se comunicar com o servidor\n                        , tente novamente!\n                    </Alert>)\n                    : null}\n                <Typography variant='h6'>Editar cadastro</Typography>\n                <Formik\n                    initialValues={{\n                        name: professional.name,\n                        email: professional.email,\n                        operation: professional.operation\n                    }}\n                    validationSchema={RegisterSchema}\n                    onSubmit={onSubmit}\n                >\n                    {({ handleChange, handleBlur, handleSubmit, values, errors, touched }) => (\n                        <>\n                            <TextField\n                                error={errors.name && touched.name ? true : false}\n                                id=\"name\"\n                                label=\"Nome\"\n                                className={classes.input}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.name}\n                                helperText={\n                                    errors.name && touched.name ? (\n                                        errors.name\n                                    ) : null\n                                }\n                            />\n                            <TextField\n                                error={errors.email && touched.email ? true : false}\n                                id=\"email\"\n                                label=\"E-mail\"\n                                className={classes.input}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.email}\n                                helperText={\n                                    errors.email && touched.email ? (\n                                        errors.email\n                                    ) : null\n                                }\n                            />\n                            <FormControl className={classes.input}\n                                error={errors.operation && touched.operation ? true : false}>\n                                <InputLabel id=\"operation\">Atuação</InputLabel>\n                                <NativeSelect\n                                    id=\"operation\"\n                                    value={values.operation}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                >\n                                    <option aria-label=\"None\" value=\"\" />\n                                    <option value={'Enfermeiro(a)'}>Enfermeiro(a)</option>\n                                    <option value={'Medico(a)'}>Médico(a)</option>\n                                    <option value={'Administrativo'}>Administrativo</option>\n                                </NativeSelect>\n                                <FormHelperText>\n                                    {\n                                        errors.operation && touched.operation ? (\n                                            errors.operation\n                                        ) : null\n                                    }\n                                </FormHelperText>\n                            </FormControl>\n                            <Button\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                className={classes.btn}\n                                onClick={handleSubmit}\n                            >\n                                Editar\n                            </Button>\n                        </>\n                    )}\n                </Formik>\n            </Paper>\n        </>\n    )\n}","import React, { useState } from 'react'\nimport {\n    makeStyles,\n    Typography,\n    Paper,\n    TextField,\n    FormControl,\n    InputLabel,\n    FormHelperText,\n    NativeSelect,\n    Button,\n} from '@material-ui/core/'\nimport { Alert } from '@material-ui/lab'\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useHistory } from 'react-router-dom';\nconst useStyles = makeStyles({\n    main_card: {\n        width: '80%',\n        display: 'flex',\n        flexDirection: 'column',\n        padding: '30px'\n    },\n    input: {\n        marginTop: '15px'\n    },\n    btn: {\n        marginTop: '10px'\n    },\n    alert: {\n        marginBottom: '20px',\n    }\n})\n\nconst RegisterSchema = Yup.object().shape({\n    name: Yup.string().required('Campo Obrigatório'),\n    email: Yup.string().email('Email inválido').required('Campo obrigatório'),\n    tel: Yup.string().required('Campo Obrigatṕrio'),\n    gender: Yup.string().required('Campo Obrigatório'),\n    age: Yup.number().positive('Idade invalida').integer('formato invalido')\n});\n\nexport default function PatientForm() {\n    const classes = useStyles()\n    const history = useHistory()\n    const [submit, setSubmit] = useState(false)\n    const [submitError, setSubmitError] = useState(false)\n\n    const onSubmit = async (values) => {\n        try {\n            if(localStorage.getItem('patients') === null){\n                localStorage.setItem('patients','[]')\n            }\n            else{\n                const patients = JSON.parse(localStorage.getItem('patients'))\n                patients.push(values)\n                localStorage.setItem('patients',JSON.stringify(patients))\n                //await Professional.register(values)\n                setSubmitError(false)\n                setSubmit(true)\n                //setTimeout(() => history.push(\"/professional\"), 2000)\n            }\n        }\n        catch (err) {\n            setSubmitError(true)\n        }\n    }\n    return (\n        <>\n            <Paper elevation={3} className={classes.main_card}>\n                {submit ? (\n                    <Alert\n                        severity=\"success\"\n                        className={classes.alert}>Cadastro realizado com sucesso!\n                    </Alert>)\n                    : null}\n                {submitError ? (\n                    <Alert\n                        severity=\"error\"\n                        className={classes.alert}>Ocorreu um problema ao tentar se comunicar com o servidor\n                        , tente novamente!\n                    </Alert>)\n                    : null}\n                <Typography variant='h6'>Adicionar novo paciente</Typography>\n                <Formik\n                    initialValues={{\n                        name: '',\n                        email: '',\n                        tel: '',\n                        gender: '',\n                        age: ''\n                    }}\n                    validationSchema={RegisterSchema}\n                    onSubmit={onSubmit}\n                >\n                    {({ handleChange, handleBlur, handleSubmit, values, errors, touched }) => (\n                        <>\n                            <TextField\n                                error={errors.name && touched.name ? true : false}\n                                id=\"name\"\n                                label=\"Nome\"\n                                className={classes.input}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.name}\n                                helperText={\n                                    errors.name && touched.name ? (\n                                        errors.name\n                                    ) : null\n                                }\n                            />\n                            <TextField\n                                error={errors.email && touched.email ? true : false}\n                                id=\"email\"\n                                label=\"E-mail\"\n                                className={classes.input}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.email}\n                                helperText={\n                                    errors.email && touched.email ? (\n                                        errors.email\n                                    ) : null\n                                }\n                            />\n                            <TextField\n                                error={errors.tel && touched.tel ? true : false}\n                                id=\"tel\"\n                                label=\"Tel\"\n                                className={classes.input}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.tel}\n                                helperText={\n                                    errors.tel && touched.tel ? (\n                                        errors.tel\n                                    ) : null\n                                }\n                            />\n                            <FormControl className={classes.input}\n                                error={errors.gender && touched.gender ? true : false}>\n                                <InputLabel id=\"gender\">Sexo</InputLabel>\n                                <NativeSelect\n                                    id=\"gender\"\n                                    value={values.gender}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                >\n                                    <option aria-label=\"None\" value=\"\" />\n                                    <option value={'Masculino'}>Masculino</option>\n                                    <option value={'Feminino'}>Feminino</option>\n                                </NativeSelect>\n                                <FormHelperText>\n                                    {\n                                        errors.gender && touched.gender ? (\n                                            errors.gender\n                                        ) : null\n                                    }\n                                </FormHelperText>\n                            </FormControl>\n                            <TextField\n                                error={errors.age && touched.age ? true : false}\n                                id=\"age\"\n                                label=\"Idade\"\n                                className={classes.input}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.age}\n                                helperText={\n                                    errors.age && touched.age ? (\n                                        errors.age\n                                    ) : null\n                                }\n                            />\n\n\n                            <Button\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                className={classes.btn}\n                                onClick={handleSubmit}\n                            >\n                                Registrar\n                            </Button>\n                        </>\n                    )}\n                </Formik>\n            </Paper>\n        </>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport {\n    makeStyles,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n    Paper,\n    Button,\n} from '@material-ui/core/'\nimport { Alert } from '@material-ui/lab'\nimport Professional from '../../services/Professional'\nimport { useHistory } from 'react-router-dom';\n\nconst useStyles = makeStyles({\n    main_content: {\n        marginTop: '100px',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    btn: {\n        marginRight: '10px'\n    },\n    table: {\n        width: '100%'\n    }\n})\n\nexport default function PatientManager() {\n    const classes = useStyles()\n    const history = useHistory()\n    const [patientData, setPatientData] = useState(JSON.parse(localStorage.getItem('patients')))\n    const [error, setError] = useState(false)\n\n    // useEffect(() => {\n    //     async function fetchApi() {\n    //         try {\n    //             const response = await Professional.getAll()\n    //             setProfessionalsData(response.data)\n    //         } catch (err) {\n    //             setError(true)\n    //         }\n    //     }\n    //     fetchApi()\n    // }, [])\n\n    const handleDelete = async (email) => {\n        try {\n            // await Professional.delete(id)\n            // const updatedProfessionals = professionalsData.filter((data) => data._id !== id)\n            // setProfessionalsData(updatedProfessionals)\n            // setError(false)\n            const updatedPatients = patientData.filter((data) => data.email !== email)\n            setPatientData(updatedPatients)\n            setError(false)\n            localStorage.setItem('patients',JSON.stringify(updatedPatients))\n        } catch (error) {\n            setError(true)\n        }\n    }\n\n    return (\n        <>\n            {error ? (<Alert\n                severity=\"error\">\n                Ocorreu um problema ao tentar se comunicar com o servidor\n                , tente novamente!\n            </Alert>) : null}\n            <TableContainer component={Paper}>\n                <Table className={classes.table} aria-label=\"simple table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Nome</TableCell>\n                            <TableCell>Email</TableCell>\n                            <TableCell>Tel</TableCell>\n                            <TableCell>Gender</TableCell>\n                            <TableCell>Age</TableCell>\n                            <TableCell>Ações</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {patientData ? \n                            (patientData?.map((row) => (\n                                <TableRow key={row.name}>\n                                    <TableCell>{row.name}</TableCell>\n                                    <TableCell>{row.email}</TableCell>\n                                    <TableCell>{row.tel}</TableCell>\n                                    <TableCell>{row.gender}</TableCell>\n                                    <TableCell>{row.age}</TableCell>\n                                    <TableCell>\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            className={classes.btn}\n                                            onClick={() => {\n                                                history.push({\n                                                    pathname: \"patients/edit\",\n                                                    state: { data: row }\n                                                })\n                                            }\n                                            }\n                                        >\n                                            Editar\n                                        </Button>\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"secondary\"\n                                            className={classes.btn}\n                                            onClick={() => handleDelete(row.email)}\n                                        >\n                                            Excluir\n                                        </Button>\n                                        <Button\n                                            variant=\"contained\"\n                                            className={classes.btn}\n                                            onClick={() => history.push(\"patients/timeline\")}\n                                        >\n                                            Linha do tempo\n                                        </Button>\n                                    </TableCell>\n                                </TableRow>\n                            ))) : <span>Carregando...</span> }\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </>\n    )\n}\n","import React, { useState } from 'react'\nimport {\n    makeStyles,\n    Typography,\n    Paper,\n    TextField,\n    FormControl,\n    InputLabel,\n    FormHelperText,\n    NativeSelect,\n    Button,\n} from '@material-ui/core/'\nimport { Alert } from '@material-ui/lab'\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useHistory, useLocation } from 'react-router-dom';\nconst useStyles = makeStyles({\n    main_card: {\n        width: '80%',\n        display: 'flex',\n        flexDirection: 'column',\n        padding: '30px'\n    },\n    input: {\n        marginTop: '15px'\n    },\n    btn: {\n        marginTop: '10px'\n    },\n    alert: {\n        marginBottom: '20px',\n    }\n})\n\nconst RegisterSchema = Yup.object().shape({\n    name: Yup.string().required('Campo Obrigatório'),\n    email: Yup.string().email('Email inválido').required('Campo obrigatório'),\n    tel: Yup.string().required('Campo Obrigatṕrio'),\n    gender: Yup.string().required('Campo Obrigatório'),\n    age: Yup.number().positive('Idade invalida').integer('formato invalido')\n});\n\nexport default function PatientForm() {\n    const classes = useStyles()\n    const history = useHistory()\n    const location = useLocation()\n    const [submit, setSubmit] = useState(false)\n    const [submitError, setSubmitError] = useState(false)\n    const patient = location.state.data\n\n\n    const onSubmit = async (values) => {\n        try {\n            const patients = JSON.parse(localStorage.getItem('patients'))\n            const updatedPatients = patients.filter(item => item.email !== patient.email)\n            updatedPatients.push(values)\n            localStorage.setItem('patients', JSON.stringify(updatedPatients))\n            //await Professional.register(values)\n            setSubmitError(false)\n            setSubmit(true)\n            //setTimeout(() => history.push(\"/professional\"), 2000)\n        }\n        catch (err) {\n            setSubmitError(true)\n        }\n    }\n\n    return (\n        <>\n            <Paper elevation={3} className={classes.main_card}>\n                {submit ? (\n                    <Alert\n                        severity=\"success\"\n                        className={classes.alert}>Cadastro realizado com sucesso!\n                    </Alert>)\n                    : null}\n                {submitError ? (\n                    <Alert\n                        severity=\"error\"\n                        className={classes.alert}>Ocorreu um problema ao tentar se comunicar com o servidor\n                        , tente novamente!\n                    </Alert>)\n                    : null}\n                <Typography variant='h6'>Editar paciente</Typography>\n                <Formik\n                    initialValues={{\n                        name: patient.name,\n                        email: patient.email,\n                        tel: patient.tel,\n                        gender: patient.gender,\n                        age: patient.age\n                    }}\n                    validationSchema={RegisterSchema}\n                    onSubmit={onSubmit}\n                >\n                    {({ handleChange, handleBlur, handleSubmit, values, errors, touched }) => (\n                        <>\n                            <TextField\n                                error={errors.name && touched.name ? true : false}\n                                id=\"name\"\n                                label=\"Nome\"\n                                className={classes.input}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.name}\n                                helperText={\n                                    errors.name && touched.name ? (\n                                        errors.name\n                                    ) : null\n                                }\n                            />\n                            <TextField\n                                error={errors.email && touched.email ? true : false}\n                                id=\"email\"\n                                label=\"E-mail\"\n                                className={classes.input}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.email}\n                                helperText={\n                                    errors.email && touched.email ? (\n                                        errors.email\n                                    ) : null\n                                }\n                            />\n                            <TextField\n                                error={errors.tel && touched.tel ? true : false}\n                                id=\"tel\"\n                                label=\"Tel\"\n                                className={classes.input}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.tel}\n                                helperText={\n                                    errors.tel && touched.tel ? (\n                                        errors.tel\n                                    ) : null\n                                }\n                            />\n                            <FormControl className={classes.input}\n                                error={errors.gender && touched.gender ? true : false}>\n                                <InputLabel id=\"gender\">Sexo</InputLabel>\n                                <NativeSelect\n                                    id=\"gender\"\n                                    value={values.gender}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                >\n                                    <option aria-label=\"None\" value=\"\" />\n                                    <option value={'Masculino'}>Masculino</option>\n                                    <option value={'Feminino'}>Feminino</option>\n                                </NativeSelect>\n                                <FormHelperText>\n                                    {\n                                        errors.gender && touched.gender ? (\n                                            errors.gender\n                                        ) : null\n                                    }\n                                </FormHelperText>\n                            </FormControl>\n                            <TextField\n                                error={errors.age && touched.age ? true : false}\n                                id=\"age\"\n                                label=\"Idade\"\n                                className={classes.input}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.age}\n                                helperText={\n                                    errors.age && touched.age ? (\n                                        errors.age\n                                    ) : null\n                                }\n                            />\n\n\n                            <Button\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                className={classes.btn}\n                                onClick={handleSubmit}\n                            >\n                                Editar\n                            </Button>\n                        </>\n                    )}\n                </Formik>\n            </Paper>\n        </>\n    )\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Timeline from '@material-ui/lab/Timeline';\nimport TimelineItem from '@material-ui/lab/TimelineItem';\nimport TimelineSeparator from '@material-ui/lab/TimelineSeparator';\nimport TimelineConnector from '@material-ui/lab/TimelineConnector';\nimport TimelineContent from '@material-ui/lab/TimelineContent';\nimport TimelineOppositeContent from '@material-ui/lab/TimelineOppositeContent';\nimport TimelineDot from '@material-ui/lab/TimelineDot';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  paper: {\n    padding: '6px 16px',\n  },\n})\n\nexport default function PatientTimeline() {\n  const classes = useStyles();\n\n  return (\n    <Timeline align=\"alternate\">\n      <TimelineItem>\n        <TimelineOppositeContent>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            9:30 am\n          </Typography>\n        </TimelineOppositeContent>\n        <TimelineSeparator>\n          <TimelineDot />\n          <TimelineConnector />\n        </TimelineSeparator>\n        <TimelineContent>\n          <Paper elevation={3} className={classes.paper}>\n            <Typography>Iniciou transfusão</Typography>\n          </Paper>\n        </TimelineContent>\n      </TimelineItem>\n      <TimelineItem>\n        <TimelineOppositeContent>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            10:00 am\n          </Typography>\n        </TimelineOppositeContent>\n        <TimelineSeparator>\n          <TimelineDot />\n        </TimelineSeparator>\n        <TimelineContent>\n          <Paper elevation={3} className={classes.paper}>\n            <Typography>Terminou transfusão</Typography>\n          </Paper>\n        </TimelineContent>\n      </TimelineItem>\n    </Timeline>\n  );\n}","import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport App from './App'\n\n//Professionals\nimport ProfessionalForm from './components/Professionals/ProfessionalForm'\nimport ProfessionalManager from './components/Professionals/ProfessionalManager'\nimport ProfessionalEditForm from './components/Professionals/ProfessionalEditForm'\n//Patients\nimport PatientForm from './components/Patients/PatientForm'\nimport PatientManager from './components/Patients/PatientManager'\nimport PatientEditForm from './components/Patients/PatientEditForm'\nimport PatientTimeline from './components/Patients/PatientTImeline'\n\nimport React from 'react'\n\nexport default function routes() {\n    return (\n        <Router basename={process.env.PUBLIC_URL}>\n            <Switch>\n                <Route exact path=\"/\">\n                    <App />\n                </Route>\n                <Route exact path=\"/professional/add\">\n                    <App component={<ProfessionalForm />} />\n                </Route>\n                <Route exact path=\"/professional\">\n                    <App component={<ProfessionalManager />} />\n                </Route>\n                <Route exact path=\"/professional/edit\">\n                    <App component={<ProfessionalEditForm />} />\n                </Route>\n                <Route exact path=\"/patients/add\">\n                    <App component={<PatientForm />} />\n                </Route>\n                <Route exact path=\"/patients/edit\">\n                    <App component={<PatientEditForm />} />\n                </Route>\n                <Route exact path=\"/patients\">\n                    <App component={<PatientManager />} />\n                </Route>\n                <Route exact path=\"/patients/timeline\">\n                    <App component={<PatientTimeline />} />\n                </Route>\n            </Switch>\n        </Router>\n    )\n}\n","import ReactDOM from 'react-dom'\nimport './index.css'\nimport React from 'react'\nimport Routes from './routes'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}